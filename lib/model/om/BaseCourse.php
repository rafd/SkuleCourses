<?php

/**
 * Base class that represents a row from the 'course' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 12/19/09 15:53:20
 *
 * @package    lib.model.om
 */
abstract class BaseCourse extends BaseObject  implements Persistent {


  const PEER = 'CoursePeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CoursePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the dept_id field.
	 * @var        string
	 */
	protected $dept_id;

	/**
	 * The value for the descr field.
	 * @var        string
	 */
	protected $descr;

	/**
	 * The value for the is_eng field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_eng;

	/**
	 * @var        Department
	 */
	protected $aDepartment;

	/**
	 * @var        array CourseComment[] Collection to store aggregation of CourseComment objects.
	 */
	protected $collCourseComments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCourseComments.
	 */
	private $lastCourseCommentCriteria = null;

	/**
	 * @var        array CourseDetail[] Collection to store aggregation of CourseDetail objects.
	 */
	protected $collCourseDetails;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCourseDetails.
	 */
	private $lastCourseDetailCriteria = null;

	/**
	 * @var        array CourseInstructorAssociation[] Collection to store aggregation of CourseInstructorAssociation objects.
	 */
	protected $collCourseInstructorAssociations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCourseInstructorAssociations.
	 */
	private $lastCourseInstructorAssociationCriteria = null;

	/**
	 * @var        array CourseDisciplineAssociation[] Collection to store aggregation of CourseDisciplineAssociation objects.
	 */
	protected $collCourseDisciplineAssociations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCourseDisciplineAssociations.
	 */
	private $lastCourseDisciplineAssociationCriteria = null;

	/**
	 * @var        array Exam[] Collection to store aggregation of Exam objects.
	 */
	protected $collExams;

	/**
	 * @var        Criteria The criteria used to select the current contents of collExams.
	 */
	private $lastExamCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCourse object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_eng = true;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [dept_id] column value.
	 * 
	 * @return     string
	 */
	public function getDeptId()
	{
		return $this->dept_id;
	}

	/**
	 * Get the [descr] column value.
	 * 
	 * @return     string
	 */
	public function getDescr()
	{
		return $this->descr;
	}

	/**
	 * Get the [is_eng] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsEng()
	{
		return $this->is_eng;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Course The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CoursePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [dept_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Course The current object (for fluent API support)
	 */
	public function setDeptId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dept_id !== $v) {
			$this->dept_id = $v;
			$this->modifiedColumns[] = CoursePeer::DEPT_ID;
		}

		if ($this->aDepartment !== null && $this->aDepartment->getId() !== $v) {
			$this->aDepartment = null;
		}

		return $this;
	} // setDeptId()

	/**
	 * Set the value of [descr] column.
	 * 
	 * @param      string $v new value
	 * @return     Course The current object (for fluent API support)
	 */
	public function setDescr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descr !== $v) {
			$this->descr = $v;
			$this->modifiedColumns[] = CoursePeer::DESCR;
		}

		return $this;
	} // setDescr()

	/**
	 * Set the value of [is_eng] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Course The current object (for fluent API support)
	 */
	public function setIsEng($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_eng !== $v || $v === true) {
			$this->is_eng = $v;
			$this->modifiedColumns[] = CoursePeer::IS_ENG;
		}

		return $this;
	} // setIsEng()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(CoursePeer::IS_ENG))) {
				return false;
			}

			if ($this->is_eng !== true) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->dept_id = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->descr = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->is_eng = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 4; // 4 = CoursePeer::NUM_COLUMNS - CoursePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Course object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aDepartment !== null && $this->dept_id !== $this->aDepartment->getId()) {
			$this->aDepartment = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CoursePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CoursePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aDepartment = null;
			$this->collCourseComments = null;
			$this->lastCourseCommentCriteria = null;

			$this->collCourseDetails = null;
			$this->lastCourseDetailCriteria = null;

			$this->collCourseInstructorAssociations = null;
			$this->lastCourseInstructorAssociationCriteria = null;

			$this->collCourseDisciplineAssociations = null;
			$this->lastCourseDisciplineAssociationCriteria = null;

			$this->collExams = null;
			$this->lastExamCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCourse:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CoursePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CoursePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCourse:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCourse:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CoursePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCourse:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CoursePeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aDepartment !== null) {
				if ($this->aDepartment->isModified() || $this->aDepartment->isNew()) {
					$affectedRows += $this->aDepartment->save($con);
				}
				$this->setDepartment($this->aDepartment);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CoursePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += CoursePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCourseComments !== null) {
				foreach ($this->collCourseComments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCourseDetails !== null) {
				foreach ($this->collCourseDetails as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCourseInstructorAssociations !== null) {
				foreach ($this->collCourseInstructorAssociations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCourseDisciplineAssociations !== null) {
				foreach ($this->collCourseDisciplineAssociations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collExams !== null) {
				foreach ($this->collExams as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aDepartment !== null) {
				if (!$this->aDepartment->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDepartment->getValidationFailures());
				}
			}


			if (($retval = CoursePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCourseComments !== null) {
					foreach ($this->collCourseComments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCourseDetails !== null) {
					foreach ($this->collCourseDetails as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCourseInstructorAssociations !== null) {
					foreach ($this->collCourseInstructorAssociations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCourseDisciplineAssociations !== null) {
					foreach ($this->collCourseDisciplineAssociations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collExams !== null) {
					foreach ($this->collExams as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CoursePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getDeptId();
				break;
			case 2:
				return $this->getDescr();
				break;
			case 3:
				return $this->getIsEng();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CoursePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getDeptId(),
			$keys[2] => $this->getDescr(),
			$keys[3] => $this->getIsEng(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CoursePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setDeptId($value);
				break;
			case 2:
				$this->setDescr($value);
				break;
			case 3:
				$this->setIsEng($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CoursePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDeptId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDescr($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIsEng($arr[$keys[3]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CoursePeer::DATABASE_NAME);

		if ($this->isColumnModified(CoursePeer::ID)) $criteria->add(CoursePeer::ID, $this->id);
		if ($this->isColumnModified(CoursePeer::DEPT_ID)) $criteria->add(CoursePeer::DEPT_ID, $this->dept_id);
		if ($this->isColumnModified(CoursePeer::DESCR)) $criteria->add(CoursePeer::DESCR, $this->descr);
		if ($this->isColumnModified(CoursePeer::IS_ENG)) $criteria->add(CoursePeer::IS_ENG, $this->is_eng);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CoursePeer::DATABASE_NAME);

		$criteria->add(CoursePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Course (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setId($this->id);

		$copyObj->setDeptId($this->dept_id);

		$copyObj->setDescr($this->descr);

		$copyObj->setIsEng($this->is_eng);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCourseComments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCourseComment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCourseDetails() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCourseDetail($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCourseInstructorAssociations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCourseInstructorAssociation($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCourseDisciplineAssociations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCourseDisciplineAssociation($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getExams() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addExam($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Course Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CoursePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CoursePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Department object.
	 *
	 * @param      Department $v
	 * @return     Course The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDepartment(Department $v = null)
	{
		if ($v === null) {
			$this->setDeptId(NULL);
		} else {
			$this->setDeptId($v->getId());
		}

		$this->aDepartment = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Department object, it will not be re-added.
		if ($v !== null) {
			$v->addCourse($this);
		}

		return $this;
	}


	/**
	 * Get the associated Department object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Department The associated Department object.
	 * @throws     PropelException
	 */
	public function getDepartment(PropelPDO $con = null)
	{
		if ($this->aDepartment === null && (($this->dept_id !== "" && $this->dept_id !== null))) {
			$c = new Criteria(DepartmentPeer::DATABASE_NAME);
			$c->add(DepartmentPeer::ID, $this->dept_id);
			$this->aDepartment = DepartmentPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aDepartment->addCourses($this);
			 */
		}
		return $this->aDepartment;
	}

	/**
	 * Clears out the collCourseComments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCourseComments()
	 */
	public function clearCourseComments()
	{
		$this->collCourseComments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCourseComments collection (array).
	 *
	 * By default this just sets the collCourseComments collection to an empty array (like clearcollCourseComments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCourseComments()
	{
		$this->collCourseComments = array();
	}

	/**
	 * Gets an array of CourseComment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Course has previously been saved, it will retrieve
	 * related CourseComments from storage. If this Course is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CourseComment[]
	 * @throws     PropelException
	 */
	public function getCourseComments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCourseComments === null) {
			if ($this->isNew()) {
			   $this->collCourseComments = array();
			} else {

				$criteria->add(CourseCommentPeer::COURSE_ID, $this->id);

				CourseCommentPeer::addSelectColumns($criteria);
				$this->collCourseComments = CourseCommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CourseCommentPeer::COURSE_ID, $this->id);

				CourseCommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCourseCommentCriteria) || !$this->lastCourseCommentCriteria->equals($criteria)) {
					$this->collCourseComments = CourseCommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCourseCommentCriteria = $criteria;
		return $this->collCourseComments;
	}

	/**
	 * Returns the number of related CourseComment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CourseComment objects.
	 * @throws     PropelException
	 */
	public function countCourseComments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCourseComments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CourseCommentPeer::COURSE_ID, $this->id);

				$count = CourseCommentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CourseCommentPeer::COURSE_ID, $this->id);

				if (!isset($this->lastCourseCommentCriteria) || !$this->lastCourseCommentCriteria->equals($criteria)) {
					$count = CourseCommentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCourseComments);
				}
			} else {
				$count = count($this->collCourseComments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CourseComment object to this object
	 * through the CourseComment foreign key attribute.
	 *
	 * @param      CourseComment $l CourseComment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCourseComment(CourseComment $l)
	{
		if ($this->collCourseComments === null) {
			$this->initCourseComments();
		}
		if (!in_array($l, $this->collCourseComments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCourseComments, $l);
			$l->setCourse($this);
		}
	}

	/**
	 * Clears out the collCourseDetails collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCourseDetails()
	 */
	public function clearCourseDetails()
	{
		$this->collCourseDetails = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCourseDetails collection (array).
	 *
	 * By default this just sets the collCourseDetails collection to an empty array (like clearcollCourseDetails());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCourseDetails()
	{
		$this->collCourseDetails = array();
	}

	/**
	 * Gets an array of CourseDetail objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Course has previously been saved, it will retrieve
	 * related CourseDetails from storage. If this Course is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CourseDetail[]
	 * @throws     PropelException
	 */
	public function getCourseDetails($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCourseDetails === null) {
			if ($this->isNew()) {
			   $this->collCourseDetails = array();
			} else {

				$criteria->add(CourseDetailPeer::COURSE_ID, $this->id);

				CourseDetailPeer::addSelectColumns($criteria);
				$this->collCourseDetails = CourseDetailPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CourseDetailPeer::COURSE_ID, $this->id);

				CourseDetailPeer::addSelectColumns($criteria);
				if (!isset($this->lastCourseDetailCriteria) || !$this->lastCourseDetailCriteria->equals($criteria)) {
					$this->collCourseDetails = CourseDetailPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCourseDetailCriteria = $criteria;
		return $this->collCourseDetails;
	}

	/**
	 * Returns the number of related CourseDetail objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CourseDetail objects.
	 * @throws     PropelException
	 */
	public function countCourseDetails(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCourseDetails === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CourseDetailPeer::COURSE_ID, $this->id);

				$count = CourseDetailPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CourseDetailPeer::COURSE_ID, $this->id);

				if (!isset($this->lastCourseDetailCriteria) || !$this->lastCourseDetailCriteria->equals($criteria)) {
					$count = CourseDetailPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCourseDetails);
				}
			} else {
				$count = count($this->collCourseDetails);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CourseDetail object to this object
	 * through the CourseDetail foreign key attribute.
	 *
	 * @param      CourseDetail $l CourseDetail
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCourseDetail(CourseDetail $l)
	{
		if ($this->collCourseDetails === null) {
			$this->initCourseDetails();
		}
		if (!in_array($l, $this->collCourseDetails, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCourseDetails, $l);
			$l->setCourse($this);
		}
	}

	/**
	 * Clears out the collCourseInstructorAssociations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCourseInstructorAssociations()
	 */
	public function clearCourseInstructorAssociations()
	{
		$this->collCourseInstructorAssociations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCourseInstructorAssociations collection (array).
	 *
	 * By default this just sets the collCourseInstructorAssociations collection to an empty array (like clearcollCourseInstructorAssociations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCourseInstructorAssociations()
	{
		$this->collCourseInstructorAssociations = array();
	}

	/**
	 * Gets an array of CourseInstructorAssociation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Course has previously been saved, it will retrieve
	 * related CourseInstructorAssociations from storage. If this Course is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CourseInstructorAssociation[]
	 * @throws     PropelException
	 */
	public function getCourseInstructorAssociations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCourseInstructorAssociations === null) {
			if ($this->isNew()) {
			   $this->collCourseInstructorAssociations = array();
			} else {

				$criteria->add(CourseInstructorAssociationPeer::COURSE_ID, $this->id);

				CourseInstructorAssociationPeer::addSelectColumns($criteria);
				$this->collCourseInstructorAssociations = CourseInstructorAssociationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CourseInstructorAssociationPeer::COURSE_ID, $this->id);

				CourseInstructorAssociationPeer::addSelectColumns($criteria);
				if (!isset($this->lastCourseInstructorAssociationCriteria) || !$this->lastCourseInstructorAssociationCriteria->equals($criteria)) {
					$this->collCourseInstructorAssociations = CourseInstructorAssociationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCourseInstructorAssociationCriteria = $criteria;
		return $this->collCourseInstructorAssociations;
	}

	/**
	 * Returns the number of related CourseInstructorAssociation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CourseInstructorAssociation objects.
	 * @throws     PropelException
	 */
	public function countCourseInstructorAssociations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCourseInstructorAssociations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CourseInstructorAssociationPeer::COURSE_ID, $this->id);

				$count = CourseInstructorAssociationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CourseInstructorAssociationPeer::COURSE_ID, $this->id);

				if (!isset($this->lastCourseInstructorAssociationCriteria) || !$this->lastCourseInstructorAssociationCriteria->equals($criteria)) {
					$count = CourseInstructorAssociationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCourseInstructorAssociations);
				}
			} else {
				$count = count($this->collCourseInstructorAssociations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CourseInstructorAssociation object to this object
	 * through the CourseInstructorAssociation foreign key attribute.
	 *
	 * @param      CourseInstructorAssociation $l CourseInstructorAssociation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCourseInstructorAssociation(CourseInstructorAssociation $l)
	{
		if ($this->collCourseInstructorAssociations === null) {
			$this->initCourseInstructorAssociations();
		}
		if (!in_array($l, $this->collCourseInstructorAssociations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCourseInstructorAssociations, $l);
			$l->setCourse($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Course is new, it will return
	 * an empty collection; or if this Course has previously
	 * been saved, it will retrieve related CourseInstructorAssociations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Course.
	 */
	public function getCourseInstructorAssociationsJoinInstructor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCourseInstructorAssociations === null) {
			if ($this->isNew()) {
				$this->collCourseInstructorAssociations = array();
			} else {

				$criteria->add(CourseInstructorAssociationPeer::COURSE_ID, $this->id);

				$this->collCourseInstructorAssociations = CourseInstructorAssociationPeer::doSelectJoinInstructor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CourseInstructorAssociationPeer::COURSE_ID, $this->id);

			if (!isset($this->lastCourseInstructorAssociationCriteria) || !$this->lastCourseInstructorAssociationCriteria->equals($criteria)) {
				$this->collCourseInstructorAssociations = CourseInstructorAssociationPeer::doSelectJoinInstructor($criteria, $con, $join_behavior);
			}
		}
		$this->lastCourseInstructorAssociationCriteria = $criteria;

		return $this->collCourseInstructorAssociations;
	}

	/**
	 * Clears out the collCourseDisciplineAssociations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCourseDisciplineAssociations()
	 */
	public function clearCourseDisciplineAssociations()
	{
		$this->collCourseDisciplineAssociations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCourseDisciplineAssociations collection (array).
	 *
	 * By default this just sets the collCourseDisciplineAssociations collection to an empty array (like clearcollCourseDisciplineAssociations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCourseDisciplineAssociations()
	{
		$this->collCourseDisciplineAssociations = array();
	}

	/**
	 * Gets an array of CourseDisciplineAssociation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Course has previously been saved, it will retrieve
	 * related CourseDisciplineAssociations from storage. If this Course is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CourseDisciplineAssociation[]
	 * @throws     PropelException
	 */
	public function getCourseDisciplineAssociations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCourseDisciplineAssociations === null) {
			if ($this->isNew()) {
			   $this->collCourseDisciplineAssociations = array();
			} else {

				$criteria->add(CourseDisciplineAssociationPeer::COURSE_ID, $this->id);

				CourseDisciplineAssociationPeer::addSelectColumns($criteria);
				$this->collCourseDisciplineAssociations = CourseDisciplineAssociationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CourseDisciplineAssociationPeer::COURSE_ID, $this->id);

				CourseDisciplineAssociationPeer::addSelectColumns($criteria);
				if (!isset($this->lastCourseDisciplineAssociationCriteria) || !$this->lastCourseDisciplineAssociationCriteria->equals($criteria)) {
					$this->collCourseDisciplineAssociations = CourseDisciplineAssociationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCourseDisciplineAssociationCriteria = $criteria;
		return $this->collCourseDisciplineAssociations;
	}

	/**
	 * Returns the number of related CourseDisciplineAssociation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CourseDisciplineAssociation objects.
	 * @throws     PropelException
	 */
	public function countCourseDisciplineAssociations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCourseDisciplineAssociations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CourseDisciplineAssociationPeer::COURSE_ID, $this->id);

				$count = CourseDisciplineAssociationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CourseDisciplineAssociationPeer::COURSE_ID, $this->id);

				if (!isset($this->lastCourseDisciplineAssociationCriteria) || !$this->lastCourseDisciplineAssociationCriteria->equals($criteria)) {
					$count = CourseDisciplineAssociationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCourseDisciplineAssociations);
				}
			} else {
				$count = count($this->collCourseDisciplineAssociations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CourseDisciplineAssociation object to this object
	 * through the CourseDisciplineAssociation foreign key attribute.
	 *
	 * @param      CourseDisciplineAssociation $l CourseDisciplineAssociation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCourseDisciplineAssociation(CourseDisciplineAssociation $l)
	{
		if ($this->collCourseDisciplineAssociations === null) {
			$this->initCourseDisciplineAssociations();
		}
		if (!in_array($l, $this->collCourseDisciplineAssociations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCourseDisciplineAssociations, $l);
			$l->setCourse($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Course is new, it will return
	 * an empty collection; or if this Course has previously
	 * been saved, it will retrieve related CourseDisciplineAssociations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Course.
	 */
	public function getCourseDisciplineAssociationsJoinEnumItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCourseDisciplineAssociations === null) {
			if ($this->isNew()) {
				$this->collCourseDisciplineAssociations = array();
			} else {

				$criteria->add(CourseDisciplineAssociationPeer::COURSE_ID, $this->id);

				$this->collCourseDisciplineAssociations = CourseDisciplineAssociationPeer::doSelectJoinEnumItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CourseDisciplineAssociationPeer::COURSE_ID, $this->id);

			if (!isset($this->lastCourseDisciplineAssociationCriteria) || !$this->lastCourseDisciplineAssociationCriteria->equals($criteria)) {
				$this->collCourseDisciplineAssociations = CourseDisciplineAssociationPeer::doSelectJoinEnumItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastCourseDisciplineAssociationCriteria = $criteria;

		return $this->collCourseDisciplineAssociations;
	}

	/**
	 * Clears out the collExams collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addExams()
	 */
	public function clearExams()
	{
		$this->collExams = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collExams collection (array).
	 *
	 * By default this just sets the collExams collection to an empty array (like clearcollExams());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initExams()
	{
		$this->collExams = array();
	}

	/**
	 * Gets an array of Exam objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Course has previously been saved, it will retrieve
	 * related Exams from storage. If this Course is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Exam[]
	 * @throws     PropelException
	 */
	public function getExams($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collExams === null) {
			if ($this->isNew()) {
			   $this->collExams = array();
			} else {

				$criteria->add(ExamPeer::COURSE_ID, $this->id);

				ExamPeer::addSelectColumns($criteria);
				$this->collExams = ExamPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ExamPeer::COURSE_ID, $this->id);

				ExamPeer::addSelectColumns($criteria);
				if (!isset($this->lastExamCriteria) || !$this->lastExamCriteria->equals($criteria)) {
					$this->collExams = ExamPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastExamCriteria = $criteria;
		return $this->collExams;
	}

	/**
	 * Returns the number of related Exam objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Exam objects.
	 * @throws     PropelException
	 */
	public function countExams(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collExams === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ExamPeer::COURSE_ID, $this->id);

				$count = ExamPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ExamPeer::COURSE_ID, $this->id);

				if (!isset($this->lastExamCriteria) || !$this->lastExamCriteria->equals($criteria)) {
					$count = ExamPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collExams);
				}
			} else {
				$count = count($this->collExams);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Exam object to this object
	 * through the Exam foreign key attribute.
	 *
	 * @param      Exam $l Exam
	 * @return     void
	 * @throws     PropelException
	 */
	public function addExam(Exam $l)
	{
		if ($this->collExams === null) {
			$this->initExams();
		}
		if (!in_array($l, $this->collExams, true)) { // only add it if the **same** object is not already associated
			array_push($this->collExams, $l);
			$l->setCourse($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Course is new, it will return
	 * an empty collection; or if this Course has previously
	 * been saved, it will retrieve related Exams from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Course.
	 */
	public function getExamsJoinEnumItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CoursePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collExams === null) {
			if ($this->isNew()) {
				$this->collExams = array();
			} else {

				$criteria->add(ExamPeer::COURSE_ID, $this->id);

				$this->collExams = ExamPeer::doSelectJoinEnumItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ExamPeer::COURSE_ID, $this->id);

			if (!isset($this->lastExamCriteria) || !$this->lastExamCriteria->equals($criteria)) {
				$this->collExams = ExamPeer::doSelectJoinEnumItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastExamCriteria = $criteria;

		return $this->collExams;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCourseComments) {
				foreach ((array) $this->collCourseComments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCourseDetails) {
				foreach ((array) $this->collCourseDetails as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCourseInstructorAssociations) {
				foreach ((array) $this->collCourseInstructorAssociations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCourseDisciplineAssociations) {
				foreach ((array) $this->collCourseDisciplineAssociations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collExams) {
				foreach ((array) $this->collExams as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCourseComments = null;
		$this->collCourseDetails = null;
		$this->collCourseInstructorAssociations = null;
		$this->collCourseDisciplineAssociations = null;
		$this->collExams = null;
			$this->aDepartment = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCourse:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCourse::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCourse
