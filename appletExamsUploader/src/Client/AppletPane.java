/*
 * AppletPane.java
 *
 * Created on August 27, 2009, 10:27 PM
 */

package Client;

import java.applet.AppletContext;
import java.io.File;
import java.net.URL;
import java.util.Vector;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;

/**
 *
 * @author  Jimmy
 */
public class AppletPane extends javax.swing.JPanel {
    
    private Vector<FileNode> _roots;
    private String _username;
    private String _password;
    private String _handlerPath;
    private String _year;
    private FileNode _currentFileNode;
    
    // for uploader class
    private AppletContext _appletContext;
    private URL _redirectURL;
    
    public AppletPane(AppletContext ac, URL redirectURL, String handlerPath, String username, String password, String year) {
        // initialization
        _roots = new Vector<FileNode>();
        File[] f = File.listRoots();
        for (int i=0; i<f.length; i++){
            _roots.add(new FileNode(f[i]));
        }
        initializeFileRoot();

        // DO NOT DELETE
        initComponents();
        ////

        // local file system
        _currentFileNode = _roots.elementAt(0);
        listLocal.setModel(new FileListModel(_currentFileNode));
        treeLocal.addTreeWillExpandListener(new TreeWillExpandListener(){
            public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {
                fileNodeExpansion(event);
            }
            public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {}
        });
        treeLocal.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                localTreeNodeSelection(e);
            }
        });
        treeLocal.setSelectionPath(treeLocal.getPathForRow(0));
        
        _year=year;
        _handlerPath=handlerPath;
        _username=username;
        _password=password;
        lblRemoteDescr.setText("Remote: "+year);
        
        // uploader class info
        _redirectURL = redirectURL;
        _appletContext = ac;
        
        resetControls(true);
    }
    
    private void initializeFileRoot(){
        for (int i=0; i<_roots.size(); i++){
            _roots.elementAt(i).setChildren();
            _roots.elementAt(i).setFiles();
        }
    }
    
    private void fileNodeExpansion(TreeExpansionEvent event){
        populateSelectedFileNode((FileNode)event.getPath().getLastPathComponent());
    }
    
    // if the node hasn't been cached, populate its children and files
    // otherwise, simply reference its children
    private void populateSelectedFileNode(FileNode node){
        if (node.getFiles() == null){
            revalidateFileNode(node);
        }
    }
    
    // force re-caching of the node
    private void revalidateFileNode(FileNode node){
        node.setChildren();
        node.setFiles();
    }
    
    private void writeToStatus(String msg){
        txtStatus.setText(txtStatus.getText()+">"+msg+"\n");
        // scroll to bottom
        txtStatus.setCaretPosition(txtStatus.getDocument().getLength());
    }
    
    private void resetControls(boolean wantEnabled){
        btnToRemote.setEnabled(wantEnabled);
        btnDelete.setEnabled(wantEnabled);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtStatus = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnToRemote = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        remoteScrollPanel = new javax.swing.JScrollPane();
        listRemote = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        lblRemoteDescr = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        localSplitPane = new javax.swing.JSplitPane();
        localListScrollPane = new javax.swing.JScrollPane();
        listLocal = new javax.swing.JList();
        jSplitPane1 = new javax.swing.JSplitPane();
        comboDriver = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeLocal = new javax.swing.JTree();

        txtStatus.setColumns(20);
        txtStatus.setEditable(false);
        txtStatus.setLineWrap(true);
        txtStatus.setRows(5);
        jScrollPane2.setViewportView(txtStatus);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Local");

        btnToRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/rightArrow.png"))); // NOI18N
        btnToRemote.setToolTipText("Upload selected file/files from local side to remote side (no actual transfering done)");
        btnToRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToRemoteActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/delete.gif"))); // NOI18N
        btnDelete.setToolTipText("Remove the selected remote itmes");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        remoteScrollPanel.setViewportView(listRemote);

        lblRemoteDescr.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblRemoteDescr.setText("Remote");

        btnStart.setText("Start Transfering");
        btnStart.setToolTipText("Proceed to transfer the local files to remote");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/local_icon.gif"))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/remote-icon.gif"))); // NOI18N

        localSplitPane.setDividerSize(3);

        localListScrollPane.setViewportView(listLocal);

        localSplitPane.setRightComponent(localListScrollPane);

        jSplitPane1.setDividerSize(1);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        comboDriver.setModel(new ComboDriverModel(_roots));
        comboDriver.setSelectedItem(_roots.elementAt(0));
        comboDriver.setMinimumSize(new java.awt.Dimension(150, 18));
        comboDriver.setPreferredSize(new java.awt.Dimension(100, 20));
        comboDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDriverOnSelectChanged(evt);
            }
        });
        jSplitPane1.setTopComponent(comboDriver);

        treeLocal.setModel(new FileTreeModel(_roots.elementAt(0)));
        treeLocal.setShowsRootHandles(true);
        jScrollPane1.setViewportView(treeLocal);

        jSplitPane1.setRightComponent(jScrollPane1);

        localSplitPane.setLeftComponent(jSplitPane1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jLabel5))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel2))
                            .add(layout.createSequentialGroup()
                                .add(439, 439, 439)
                                .add(jLabel3))))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                            .add(localSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnStart))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(btnToRemote, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel6)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(lblRemoteDescr))
                                    .add(remoteScrollPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel4)
                    .add(jLabel3)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel2)
                        .add(jLabel5))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(lblRemoteDescr)
                        .add(jLabel6)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(localSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                            .add(remoteScrollPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE))
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, btnDelete, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, btnStart, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .add(layout.createSequentialGroup()
                        .add(164, 164, 164)
                        .add(btnToRemote, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void btnToRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToRemoteActionPerformed

    // upload from local
    Object[] objArr = listLocal.getSelectedValues();
    int len = objArr.length;
    String err = "";

    FileNode parent;
    if (listRemote.getModel() != null && listRemote.getModel() instanceof FileListModel)
        parent = ((FileListModel)listRemote.getModel()).getParent();
    else
        parent = new FileNode(null);

    for (int i=0; i<len; i++){
        FileNode file = (FileNode)objArr[i];
        if (parent.getFiles()==null || !parent.getFiles().contains(file))
            parent.addFile(file);
        else
            err += file.toString() + "\n";
    }

    listRemote.setModel(new FileListModel(parent));
    if (!err.equals("")) JOptionPane.showMessageDialog(this, "The following files weren't added because they already exist in remote:\n\n"
                + err, "Unadded Files", JOptionPane.OK_OPTION);
}//GEN-LAST:event_btnToRemoteActionPerformed

private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    if (listRemote.getModel()!= null && listRemote.getModel() instanceof FileListModel){
        FileNode node = ((FileListModel)listRemote.getModel()).getParent();
        node.removeFile((FileNode)listRemote.getSelectedValue());
        listRemote.setModel(new FileListModel(node));
    }
}//GEN-LAST:event_btnDeleteActionPerformed

private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
    Uploader upl = new Uploader(_username, _password, _handlerPath);
    Vector<File> vec = new Vector<File>();
    int len = listRemote.getSelectedValues().length;
    for (int i=0; i<len; i++){
        vec.add((File)listRemote.getSelectedValues()[i]);
    }
    upl.setFiles(vec);
    upl.setDisplays(txtStatus, progressBar);
    upl.setYear(_year);
    upl.setRedirectWhenUploadFinished(_appletContext, _redirectURL);
    upl.uploadFiles();
}//GEN-LAST:event_btnStartActionPerformed

private void comboDriverOnSelectChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDriverOnSelectChanged
    JComboBox sender = (JComboBox)evt.getSource();
    FileNode selected = (FileNode)sender.getSelectedItem();
    treeLocal.setModel(new FileTreeModel(selected));
    listLocal.setModel(new FileListModel(selected));
    treeLocal.setSelectionPath(treeLocal.getPathForRow(0));
}//GEN-LAST:event_comboDriverOnSelectChanged

private void localTreeNodeSelection(TreeSelectionEvent e){
    TreePath path = e.getPath();
    _currentFileNode = (FileNode)path.getLastPathComponent();
    populateSelectedFileNode(_currentFileNode);
    listLocal.setModel(new FileListModel(_currentFileNode));
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnToRemote;
    private javax.swing.JComboBox comboDriver;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblRemoteDescr;
    private javax.swing.JList listLocal;
    private javax.swing.JList listRemote;
    private javax.swing.JScrollPane localListScrollPane;
    private javax.swing.JSplitPane localSplitPane;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JScrollPane remoteScrollPanel;
    private javax.swing.JTree treeLocal;
    private javax.swing.JTextArea txtStatus;
    // End of variables declaration//GEN-END:variables

}
