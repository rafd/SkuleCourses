/*
 * AppletPane.java
 * Author: Jimmy Lu
 *
 * Created on August 27, 2009, 10:27 PM
 */

package Client;

import java.applet.AppletContext;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.net.URL;
import java.util.Vector;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;

// FIXME need to filter out non-pdf files
public class AppletPane extends javax.swing.JPanel {
    
    private Vector<FileNode> _roots;
    private String _username;
    private String _password;
    private String _handlerPath;
    private String _registrationPath;
    private String _year;
    private FileNode _currentFileNode;
    
    private Vector<File> _selectedList;
    
    // for uploader class
    private AppletContext _appletContext;
    private URL _redirectURL;
    
    public AppletPane(AppletContext ac, URL redirectURL, String handlerPath, String registrationPath, String username, String password, String year) {
        // initialization
        _roots = new Vector<FileNode>();
        File[] f = File.listRoots();
        for (int i=0; i<f.length; i++){
            _roots.add(new FileNode(f[i]));
        }
        initializeFileRoot();
        _selectedList = new Vector<File>();

        // DO NOT DELETE
        initComponents();
        ////

        // local file system
        _currentFileNode = _roots.elementAt(0);
        
        listLocal.setModel(new FileListModel(_currentFileNode));
        listLocal.setCellRenderer(new FileListCellRenderer(listLocal));
        listLocal.addMouseListener(new MouseAdapter(){
            @Override
            public void mousePressed(MouseEvent e){
                int i = listLocal.locationToIndex(e.getPoint());

                if (i != -1) {
                    FileNode node = (FileNode)listLocal.getModel().getElementAt(i);
                    node.setSelected(!node.isSelected());
                    
                    int selIndex = _selectedList.indexOf(node.getUnderlyingFile());
                    if (node.isSelected() && selIndex == -1)
                        _selectedList.addElement(node.getUnderlyingFile());
                    else if (!node.isSelected() && selIndex > -1)
                        _selectedList.removeElementAt(selIndex);
                    
                    listLocal.revalidate();
               }
            }
        });
        
        treeLocal.addTreeWillExpandListener(new TreeWillExpandListener(){
            public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {
                fileNodeExpansion(event);
            }
            public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {}
        });
        treeLocal.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                localTreeNodeSelection(e);
            }
        });
        treeLocal.setSelectionPath(treeLocal.getPathForRow(0));
        
        _year=year;
        _handlerPath=handlerPath;
        _registrationPath = registrationPath;
        _username=username;
        _password=password;
        
        // uploader class info
        _redirectURL = redirectURL;
        _appletContext = ac;
        
    }
    
    private void initializeFileRoot(){
        for (int i=0; i<_roots.size(); i++){
            _roots.elementAt(i).setChildren();
            _roots.elementAt(i).setFiles();
        }
    }
    
    private void fileNodeExpansion(TreeExpansionEvent event){
        populateSelectedFileNode((FileNode)event.getPath().getLastPathComponent());
    }
    
    // if the node hasn't been cached, populate its children and files
    // otherwise, simply reference its children
    private void populateSelectedFileNode(FileNode node){
        if (node.getFiles() == null){
            revalidateFileNode(node);
        }
    }
    
    // force re-caching of the node
    private void revalidateFileNode(FileNode node){
        node.setChildren();
        node.setFiles();
    }
    
    private void writeToStatus(String msg){
        txtStatus.setText(txtStatus.getText()+">"+msg+"\n");
        // scroll to bottom
        txtStatus.setCaretPosition(txtStatus.getDocument().getLength());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtStatus = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        localSplitPane = new javax.swing.JSplitPane();
        localListScrollPane = new javax.swing.JScrollPane();
        listLocal = new javax.swing.JList();
        jSplitPane1 = new javax.swing.JSplitPane();
        comboDriver = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeLocal = new javax.swing.JTree();
        btnAll = new javax.swing.JButton();
        btnUnAll = new javax.swing.JButton();

        txtStatus.setColumns(20);
        txtStatus.setEditable(false);
        txtStatus.setLineWrap(true);
        txtStatus.setRows(5);
        jScrollPane2.setViewportView(txtStatus);

        btnStart.setBackground(new java.awt.Color(102, 153, 255));
        btnStart.setText("Start Transfering");
        btnStart.setToolTipText("Proceed to transfer the local files to remote");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        localSplitPane.setDividerSize(3);

        listLocal.setCellRenderer(null);
        localListScrollPane.setViewportView(listLocal);

        localSplitPane.setRightComponent(localListScrollPane);

        jSplitPane1.setDividerSize(1);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        comboDriver.setModel(new ComboDriverModel(_roots));
        comboDriver.setSelectedItem(_roots.elementAt(0));
        comboDriver.setMinimumSize(new java.awt.Dimension(150, 18));
        comboDriver.setPreferredSize(new java.awt.Dimension(100, 20));
        comboDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDriverOnSelectChanged(evt);
            }
        });
        jSplitPane1.setTopComponent(comboDriver);

        treeLocal.setModel(new FileTreeModel(_roots.elementAt(0)));
        treeLocal.setShowsRootHandles(true);
        jScrollPane1.setViewportView(treeLocal);

        jSplitPane1.setRightComponent(jScrollPane1);

        localSplitPane.setLeftComponent(jSplitPane1);

        btnAll.setText("Select All");
        btnAll.setToolTipText("Proceed to transfer the local files to remote");
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        btnUnAll.setText("Unselect All");
        btnUnAll.setToolTipText("Proceed to transfer the local files to remote");
        btnUnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnAllActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel4)
                        .add(464, 464, 464)
                        .add(jLabel3))
                    .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                    .add(localSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(btnAll)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnUnAll)
                        .add(37, 37, 37)
                        .add(btnStart)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel4)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(localSplitPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 331, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnAll)
                    .add(btnUnAll)
                    .add(btnStart))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
    if (btnStart.getText().equals("Next")){
        
        // redirect
        _appletContext.showDocument(_redirectURL);
        
    } else {
        
        // make sure first that the selected list is not emptys
        if (_selectedList.size() <= 0){
            JOptionPane.showMessageDialog(this, "Nothing has been selected!", "Nothing Uploaded", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // disable all buttons
        btnAll.setEnabled(false);
        btnUnAll.setEnabled(false);
        treeLocal.setEnabled(false);
        comboDriver.setEnabled(false);
        btnStart.setEnabled(false);

        // toggle the uploader object
        Thread uploaderThread = new Thread( new Runnable()
        {
            public void run()
            {
                Uploader upl = new Uploader(_username, _password, _handlerPath, _registrationPath, _year);
                upl.setFiles(_selectedList);
                upl.setDisplays(txtStatus, progressBar);
                upl.setYear(_year);
                upl.uploadFiles();

                btnStart.setText("Next");
                btnStart.setEnabled(true);
                txtStatus.setText(txtStatus.getText()+"\nClick on Next to continue...");
                txtStatus.setCaretPosition(txtStatus.getDocument().getLength());
            }
        });
        uploaderThread.start();
    }
}//GEN-LAST:event_btnStartActionPerformed

private void comboDriverOnSelectChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDriverOnSelectChanged
    JComboBox sender = (JComboBox)evt.getSource();
    FileNode selected = (FileNode)sender.getSelectedItem();
    treeLocal.setModel(new FileTreeModel(selected));
    listLocal.setModel(new FileListModel(selected));
    treeLocal.setSelectionPath(treeLocal.getPathForRow(0));
}//GEN-LAST:event_comboDriverOnSelectChanged

private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
    FileListModel model = (FileListModel)listLocal.getModel();
    int size = model.getSize();
    for (int i=0; i<size; i++){
        FileNode node = (FileNode)model.getElementAt(i);
        if (!node.isSelected()){
            node.setSelected(true);
            _selectedList.addElement(node.getUnderlyingFile());
        }
    }
    listLocal.repaint();
}//GEN-LAST:event_btnAllActionPerformed

private void btnUnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnAllActionPerformed
    FileListModel model = (FileListModel)listLocal.getModel();
    int size = model.getSize();
    for (int i=0; i<size; i++){
        FileNode node = (FileNode)model.getElementAt(i);
        if (node.isSelected()){
            node.setSelected(false);
            _selectedList.removeElement(node.getUnderlyingFile());
        }
    }
    listLocal.repaint();
}//GEN-LAST:event_btnUnAllActionPerformed

private void localTreeNodeSelection(TreeSelectionEvent e){
    TreePath path = e.getPath();
    _currentFileNode = (FileNode)path.getLastPathComponent();
    populateSelectedFileNode(_currentFileNode);
    listLocal.setModel(new FileListModel(_currentFileNode));
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnUnAll;
    private javax.swing.JComboBox comboDriver;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JList listLocal;
    private javax.swing.JScrollPane localListScrollPane;
    private javax.swing.JSplitPane localSplitPane;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTree treeLocal;
    private javax.swing.JTextArea txtStatus;
    // End of variables declaration//GEN-END:variables

}
